#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.34209
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace HNCDIExternalProjectManage
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="HNCDIExternalProject")]
	public partial class DataClassesProjectClassifyDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region 可扩展性方法定义
    partial void OnCreated();
    partial void InsertProjectClassify(ProjectClassify instance);
    partial void UpdateProjectClassify(ProjectClassify instance);
    partial void DeleteProjectClassify(ProjectClassify instance);
    partial void InsertFundClassify(FundClassify instance);
    partial void UpdateFundClassify(FundClassify instance);
    partial void DeleteFundClassify(FundClassify instance);
    partial void InsertFunds(Funds instance);
    partial void UpdateFunds(Funds instance);
    partial void DeleteFunds(Funds instance);
    partial void InsertPatentClassify(PatentClassify instance);
    partial void UpdatePatentClassify(PatentClassify instance);
    partial void DeletePatentClassify(PatentClassify instance);
    partial void InsertPatents(Patents instance);
    partial void UpdatePatents(Patents instance);
    partial void DeletePatents(Patents instance);
    partial void InsertRateClassify(RateClassify instance);
    partial void UpdateRateClassify(RateClassify instance);
    partial void DeleteRateClassify(RateClassify instance);
    partial void InsertRateResults(RateResults instance);
    partial void UpdateRateResults(RateResults instance);
    partial void DeleteRateResults(RateResults instance);
    partial void InsertResults(Results instance);
    partial void UpdateResults(Results instance);
    partial void DeleteResults(Results instance);
    partial void InsertReward(Reward instance);
    partial void UpdateReward(Reward instance);
    partial void DeleteReward(Reward instance);
    partial void InsertRewardClass(RewardClass instance);
    partial void UpdateRewardClass(RewardClass instance);
    partial void DeleteRewardClass(RewardClass instance);
    partial void InsertRewardClassify(RewardClassify instance);
    partial void UpdateRewardClassify(RewardClassify instance);
    partial void DeleteRewardClassify(RewardClassify instance);
    partial void InsertTeamDepartments(TeamDepartments instance);
    partial void UpdateTeamDepartments(TeamDepartments instance);
    partial void DeleteTeamDepartments(TeamDepartments instance);
    partial void InsertTeamWorkers(TeamWorkers instance);
    partial void UpdateTeamWorkers(TeamWorkers instance);
    partial void DeleteTeamWorkers(TeamWorkers instance);
    partial void InsertProjectBase(ProjectBase instance);
    partial void UpdateProjectBase(ProjectBase instance);
    partial void DeleteProjectBase(ProjectBase instance);
    partial void InsertExcelFileType(ExcelFileType instance);
    partial void UpdateExcelFileType(ExcelFileType instance);
    partial void DeleteExcelFileType(ExcelFileType instance);
    partial void InsertContractTypes(ContractTypes instance);
    partial void UpdateContractTypes(ContractTypes instance);
    partial void DeleteContractTypes(ContractTypes instance);
    partial void InsertProjectContracts(ProjectContracts instance);
    partial void UpdateProjectContracts(ProjectContracts instance);
    partial void DeleteProjectContracts(ProjectContracts instance);
    #endregion
		
		public DataClassesProjectClassifyDataContext() : 
				base(global::HNCDIExternalProjectManage.Properties.Settings.Default.HNCDIExternalProjectConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesProjectClassifyDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesProjectClassifyDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesProjectClassifyDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesProjectClassifyDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<ProjectClassify> ProjectClassify
		{
			get
			{
				return this.GetTable<ProjectClassify>();
			}
		}
		
		public System.Data.Linq.Table<FundClassify> FundClassify
		{
			get
			{
				return this.GetTable<FundClassify>();
			}
		}
		
		public System.Data.Linq.Table<Funds> Funds
		{
			get
			{
				return this.GetTable<Funds>();
			}
		}
		
		public System.Data.Linq.Table<PatentClassify> PatentClassify
		{
			get
			{
				return this.GetTable<PatentClassify>();
			}
		}
		
		public System.Data.Linq.Table<Patents> Patents
		{
			get
			{
				return this.GetTable<Patents>();
			}
		}
		
		public System.Data.Linq.Table<RateClassify> RateClassify
		{
			get
			{
				return this.GetTable<RateClassify>();
			}
		}
		
		public System.Data.Linq.Table<RateResults> RateResults
		{
			get
			{
				return this.GetTable<RateResults>();
			}
		}
		
		public System.Data.Linq.Table<Results> Results
		{
			get
			{
				return this.GetTable<Results>();
			}
		}
		
		public System.Data.Linq.Table<Reward> Reward
		{
			get
			{
				return this.GetTable<Reward>();
			}
		}
		
		public System.Data.Linq.Table<RewardClass> RewardClass
		{
			get
			{
				return this.GetTable<RewardClass>();
			}
		}
		
		public System.Data.Linq.Table<RewardClassify> RewardClassify
		{
			get
			{
				return this.GetTable<RewardClassify>();
			}
		}
		
		public System.Data.Linq.Table<TeamDepartments> TeamDepartments
		{
			get
			{
				return this.GetTable<TeamDepartments>();
			}
		}
		
		public System.Data.Linq.Table<TeamWorkers> TeamWorkers
		{
			get
			{
				return this.GetTable<TeamWorkers>();
			}
		}
		
		public System.Data.Linq.Table<ProjectBase> ProjectBase
		{
			get
			{
				return this.GetTable<ProjectBase>();
			}
		}
		
		public System.Data.Linq.Table<View_Funds> View_Funds
		{
			get
			{
				return this.GetTable<View_Funds>();
			}
		}
		
		public System.Data.Linq.Table<View_Rewards> View_Rewards
		{
			get
			{
				return this.GetTable<View_Rewards>();
			}
		}
		
		public System.Data.Linq.Table<View_Patents> View_Patents
		{
			get
			{
				return this.GetTable<View_Patents>();
			}
		}
		
		public System.Data.Linq.Table<View_Rates> View_Rates
		{
			get
			{
				return this.GetTable<View_Rates>();
			}
		}
		
		public System.Data.Linq.Table<ExcelFileType> ExcelFileType
		{
			get
			{
				return this.GetTable<ExcelFileType>();
			}
		}
		
		public System.Data.Linq.Table<View_SubTotalFund> View_SubTotalFund
		{
			get
			{
				return this.GetTable<View_SubTotalFund>();
			}
		}
		
		public System.Data.Linq.Table<View_ProjectFundClassifies> View_ProjectFundClassifies
		{
			get
			{
				return this.GetTable<View_ProjectFundClassifies>();
			}
		}
		
		public System.Data.Linq.Table<View_ProjectFundSumIncoming> View_ProjectFundSumIncoming
		{
			get
			{
				return this.GetTable<View_ProjectFundSumIncoming>();
			}
		}
		
		public System.Data.Linq.Table<ContractTypes> ContractTypes
		{
			get
			{
				return this.GetTable<ContractTypes>();
			}
		}
		
		public System.Data.Linq.Table<ProjectContracts> ProjectContracts
		{
			get
			{
				return this.GetTable<ProjectContracts>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProjectClassify")]
	public partial class ProjectClassify : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ClassifyId;
		
		private string _ProjectClassify1;
		
		private EntitySet<ProjectBase> _ProjectBase;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnClassifyIdChanging(int value);
    partial void OnClassifyIdChanged();
    partial void OnProjectClassify1Changing(string value);
    partial void OnProjectClassify1Changed();
    #endregion
		
		public ProjectClassify()
		{
			this._ProjectBase = new EntitySet<ProjectBase>(new Action<ProjectBase>(this.attach_ProjectBase), new Action<ProjectBase>(this.detach_ProjectBase));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClassifyId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ClassifyId
		{
			get
			{
				return this._ClassifyId;
			}
			set
			{
				if ((this._ClassifyId != value))
				{
					this.OnClassifyIdChanging(value);
					this.SendPropertyChanging();
					this._ClassifyId = value;
					this.SendPropertyChanged("ClassifyId");
					this.OnClassifyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="ProjectClassify", Storage="_ProjectClassify1", DbType="NVarChar(50)")]
		public string ProjectClassify1
		{
			get
			{
				return this._ProjectClassify1;
			}
			set
			{
				if ((this._ProjectClassify1 != value))
				{
					this.OnProjectClassify1Changing(value);
					this.SendPropertyChanging();
					this._ProjectClassify1 = value;
					this.SendPropertyChanged("ProjectClassify1");
					this.OnProjectClassify1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProjectClassify_ProjectBase", Storage="_ProjectBase", ThisKey="ClassifyId", OtherKey="ProjectClassifyID")]
		public EntitySet<ProjectBase> ProjectBase
		{
			get
			{
				return this._ProjectBase;
			}
			set
			{
				this._ProjectBase.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProjectBase(ProjectBase entity)
		{
			this.SendPropertyChanging();
			entity.ProjectClassify = this;
		}
		
		private void detach_ProjectBase(ProjectBase entity)
		{
			this.SendPropertyChanging();
			entity.ProjectClassify = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FundClassify")]
	public partial class FundClassify : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FandClassifyId;
		
		private string _FundClassify1;
		
		private System.Nullable<bool> _IncomeOrPay;
		
		private EntitySet<Funds> _Funds;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFandClassifyIdChanging(int value);
    partial void OnFandClassifyIdChanged();
    partial void OnFundClassify1Changing(string value);
    partial void OnFundClassify1Changed();
    partial void OnIncomeOrPayChanging(System.Nullable<bool> value);
    partial void OnIncomeOrPayChanged();
    #endregion
		
		public FundClassify()
		{
			this._Funds = new EntitySet<Funds>(new Action<Funds>(this.attach_Funds), new Action<Funds>(this.detach_Funds));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FandClassifyId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int FandClassifyId
		{
			get
			{
				return this._FandClassifyId;
			}
			set
			{
				if ((this._FandClassifyId != value))
				{
					this.OnFandClassifyIdChanging(value);
					this.SendPropertyChanging();
					this._FandClassifyId = value;
					this.SendPropertyChanged("FandClassifyId");
					this.OnFandClassifyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="FundClassify", Storage="_FundClassify1", DbType="NVarChar(20)")]
		public string FundClassify1
		{
			get
			{
				return this._FundClassify1;
			}
			set
			{
				if ((this._FundClassify1 != value))
				{
					this.OnFundClassify1Changing(value);
					this.SendPropertyChanging();
					this._FundClassify1 = value;
					this.SendPropertyChanged("FundClassify1");
					this.OnFundClassify1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IncomeOrPay", DbType="Bit")]
		public System.Nullable<bool> IncomeOrPay
		{
			get
			{
				return this._IncomeOrPay;
			}
			set
			{
				if ((this._IncomeOrPay != value))
				{
					this.OnIncomeOrPayChanging(value);
					this.SendPropertyChanging();
					this._IncomeOrPay = value;
					this.SendPropertyChanged("IncomeOrPay");
					this.OnIncomeOrPayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FundClassify_Funds", Storage="_Funds", ThisKey="FandClassifyId", OtherKey="FundClassifyID")]
		public EntitySet<Funds> Funds
		{
			get
			{
				return this._Funds;
			}
			set
			{
				this._Funds.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Funds(Funds entity)
		{
			this.SendPropertyChanging();
			entity.FundClassify = this;
		}
		
		private void detach_Funds(Funds entity)
		{
			this.SendPropertyChanging();
			entity.FundClassify = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Funds")]
	public partial class Funds : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _ProjectID;
		
		private System.Nullable<int> _FundClassifyID;
		
		private string _Source;
		
		private System.Nullable<decimal> _Money;
		
		private System.Nullable<System.DateTime> _Date;
		
		private string _Handled;
		
		private string _SubPrincipal;
		
		private EntityRef<FundClassify> _FundClassify;
		
		private EntityRef<ProjectBase> _ProjectBase;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnProjectIDChanging(System.Nullable<int> value);
    partial void OnProjectIDChanged();
    partial void OnFundClassifyIDChanging(System.Nullable<int> value);
    partial void OnFundClassifyIDChanged();
    partial void OnSourceChanging(string value);
    partial void OnSourceChanged();
    partial void OnMoneyChanging(System.Nullable<decimal> value);
    partial void OnMoneyChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    partial void OnHandledChanging(string value);
    partial void OnHandledChanged();
    partial void OnSubPrincipalChanging(string value);
    partial void OnSubPrincipalChanged();
    #endregion
		
		public Funds()
		{
			this._FundClassify = default(EntityRef<FundClassify>);
			this._ProjectBase = default(EntityRef<ProjectBase>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectID", DbType="Int")]
		public System.Nullable<int> ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					if (this._ProjectBase.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectID = value;
					this.SendPropertyChanged("ProjectID");
					this.OnProjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FundClassifyID", DbType="Int")]
		public System.Nullable<int> FundClassifyID
		{
			get
			{
				return this._FundClassifyID;
			}
			set
			{
				if ((this._FundClassifyID != value))
				{
					if (this._FundClassify.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFundClassifyIDChanging(value);
					this.SendPropertyChanging();
					this._FundClassifyID = value;
					this.SendPropertyChanged("FundClassifyID");
					this.OnFundClassifyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Source", DbType="NVarChar(50)")]
		public string Source
		{
			get
			{
				return this._Source;
			}
			set
			{
				if ((this._Source != value))
				{
					this.OnSourceChanging(value);
					this.SendPropertyChanging();
					this._Source = value;
					this.SendPropertyChanged("Source");
					this.OnSourceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Money", DbType="Money")]
		public System.Nullable<decimal> Money
		{
			get
			{
				return this._Money;
			}
			set
			{
				if ((this._Money != value))
				{
					this.OnMoneyChanging(value);
					this.SendPropertyChanging();
					this._Money = value;
					this.SendPropertyChanged("Money");
					this.OnMoneyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Handled", DbType="NChar(10)")]
		public string Handled
		{
			get
			{
				return this._Handled;
			}
			set
			{
				if ((this._Handled != value))
				{
					this.OnHandledChanging(value);
					this.SendPropertyChanging();
					this._Handled = value;
					this.SendPropertyChanged("Handled");
					this.OnHandledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubPrincipal", DbType="NChar(10)")]
		public string SubPrincipal
		{
			get
			{
				return this._SubPrincipal;
			}
			set
			{
				if ((this._SubPrincipal != value))
				{
					this.OnSubPrincipalChanging(value);
					this.SendPropertyChanging();
					this._SubPrincipal = value;
					this.SendPropertyChanged("SubPrincipal");
					this.OnSubPrincipalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FundClassify_Funds", Storage="_FundClassify", ThisKey="FundClassifyID", OtherKey="FandClassifyId", IsForeignKey=true)]
		public FundClassify FundClassify
		{
			get
			{
				return this._FundClassify.Entity;
			}
			set
			{
				FundClassify previousValue = this._FundClassify.Entity;
				if (((previousValue != value) 
							|| (this._FundClassify.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FundClassify.Entity = null;
						previousValue.Funds.Remove(this);
					}
					this._FundClassify.Entity = value;
					if ((value != null))
					{
						value.Funds.Add(this);
						this._FundClassifyID = value.FandClassifyId;
					}
					else
					{
						this._FundClassifyID = default(Nullable<int>);
					}
					this.SendPropertyChanged("FundClassify");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProjectBase_Funds", Storage="_ProjectBase", ThisKey="ProjectID", OtherKey="ProjectId", IsForeignKey=true, DeleteRule="CASCADE")]
		public ProjectBase ProjectBase
		{
			get
			{
				return this._ProjectBase.Entity;
			}
			set
			{
				ProjectBase previousValue = this._ProjectBase.Entity;
				if (((previousValue != value) 
							|| (this._ProjectBase.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProjectBase.Entity = null;
						previousValue.Funds.Remove(this);
					}
					this._ProjectBase.Entity = value;
					if ((value != null))
					{
						value.Funds.Add(this);
						this._ProjectID = value.ProjectId;
					}
					else
					{
						this._ProjectID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ProjectBase");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PatentClassify")]
	public partial class PatentClassify : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PatentClassifyID;
		
		private string _PatentClassify1;
		
		private EntitySet<Patents> _Patents;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPatentClassifyIDChanging(int value);
    partial void OnPatentClassifyIDChanged();
    partial void OnPatentClassify1Changing(string value);
    partial void OnPatentClassify1Changed();
    #endregion
		
		public PatentClassify()
		{
			this._Patents = new EntitySet<Patents>(new Action<Patents>(this.attach_Patents), new Action<Patents>(this.detach_Patents));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatentClassifyID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PatentClassifyID
		{
			get
			{
				return this._PatentClassifyID;
			}
			set
			{
				if ((this._PatentClassifyID != value))
				{
					this.OnPatentClassifyIDChanging(value);
					this.SendPropertyChanging();
					this._PatentClassifyID = value;
					this.SendPropertyChanged("PatentClassifyID");
					this.OnPatentClassifyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="PatentClassify", Storage="_PatentClassify1", DbType="NVarChar(50)")]
		public string PatentClassify1
		{
			get
			{
				return this._PatentClassify1;
			}
			set
			{
				if ((this._PatentClassify1 != value))
				{
					this.OnPatentClassify1Changing(value);
					this.SendPropertyChanging();
					this._PatentClassify1 = value;
					this.SendPropertyChanged("PatentClassify1");
					this.OnPatentClassify1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PatentClassify_Patents", Storage="_Patents", ThisKey="PatentClassifyID", OtherKey="PatentClassifyID")]
		public EntitySet<Patents> Patents
		{
			get
			{
				return this._Patents;
			}
			set
			{
				this._Patents.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Patents(Patents entity)
		{
			this.SendPropertyChanging();
			entity.PatentClassify = this;
		}
		
		private void detach_Patents(Patents entity)
		{
			this.SendPropertyChanging();
			entity.PatentClassify = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Patents")]
	public partial class Patents : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PatentsId;
		
		private System.Nullable<int> _ProjectID;
		
		private System.Nullable<int> _PatentClassifyID;
		
		private string _PatentNo;
		
		private string _PatentName;
		
		private string _PatendDepartment;
		
		private System.Nullable<System.DateTime> _PatentDate;
		
		private string _Note;
		
		private EntityRef<PatentClassify> _PatentClassify;
		
		private EntityRef<ProjectBase> _ProjectBase;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPatentsIdChanging(int value);
    partial void OnPatentsIdChanged();
    partial void OnProjectIDChanging(System.Nullable<int> value);
    partial void OnProjectIDChanged();
    partial void OnPatentClassifyIDChanging(System.Nullable<int> value);
    partial void OnPatentClassifyIDChanged();
    partial void OnPatentNoChanging(string value);
    partial void OnPatentNoChanged();
    partial void OnPatentNameChanging(string value);
    partial void OnPatentNameChanged();
    partial void OnPatendDepartmentChanging(string value);
    partial void OnPatendDepartmentChanged();
    partial void OnPatentDateChanging(System.Nullable<System.DateTime> value);
    partial void OnPatentDateChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    #endregion
		
		public Patents()
		{
			this._PatentClassify = default(EntityRef<PatentClassify>);
			this._ProjectBase = default(EntityRef<ProjectBase>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatentsId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PatentsId
		{
			get
			{
				return this._PatentsId;
			}
			set
			{
				if ((this._PatentsId != value))
				{
					this.OnPatentsIdChanging(value);
					this.SendPropertyChanging();
					this._PatentsId = value;
					this.SendPropertyChanged("PatentsId");
					this.OnPatentsIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectID", DbType="Int")]
		public System.Nullable<int> ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					if (this._ProjectBase.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectID = value;
					this.SendPropertyChanged("ProjectID");
					this.OnProjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatentClassifyID", DbType="Int")]
		public System.Nullable<int> PatentClassifyID
		{
			get
			{
				return this._PatentClassifyID;
			}
			set
			{
				if ((this._PatentClassifyID != value))
				{
					if (this._PatentClassify.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPatentClassifyIDChanging(value);
					this.SendPropertyChanging();
					this._PatentClassifyID = value;
					this.SendPropertyChanged("PatentClassifyID");
					this.OnPatentClassifyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatentNo", DbType="NVarChar(50)")]
		public string PatentNo
		{
			get
			{
				return this._PatentNo;
			}
			set
			{
				if ((this._PatentNo != value))
				{
					this.OnPatentNoChanging(value);
					this.SendPropertyChanging();
					this._PatentNo = value;
					this.SendPropertyChanged("PatentNo");
					this.OnPatentNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatentName", DbType="NVarChar(128)")]
		public string PatentName
		{
			get
			{
				return this._PatentName;
			}
			set
			{
				if ((this._PatentName != value))
				{
					this.OnPatentNameChanging(value);
					this.SendPropertyChanging();
					this._PatentName = value;
					this.SendPropertyChanged("PatentName");
					this.OnPatentNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatendDepartment", DbType="NVarChar(50)")]
		public string PatendDepartment
		{
			get
			{
				return this._PatendDepartment;
			}
			set
			{
				if ((this._PatendDepartment != value))
				{
					this.OnPatendDepartmentChanging(value);
					this.SendPropertyChanging();
					this._PatendDepartment = value;
					this.SendPropertyChanged("PatendDepartment");
					this.OnPatendDepartmentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatentDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> PatentDate
		{
			get
			{
				return this._PatentDate;
			}
			set
			{
				if ((this._PatentDate != value))
				{
					this.OnPatentDateChanging(value);
					this.SendPropertyChanging();
					this._PatentDate = value;
					this.SendPropertyChanged("PatentDate");
					this.OnPatentDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="NVarChar(50)")]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PatentClassify_Patents", Storage="_PatentClassify", ThisKey="PatentClassifyID", OtherKey="PatentClassifyID", IsForeignKey=true)]
		public PatentClassify PatentClassify
		{
			get
			{
				return this._PatentClassify.Entity;
			}
			set
			{
				PatentClassify previousValue = this._PatentClassify.Entity;
				if (((previousValue != value) 
							|| (this._PatentClassify.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PatentClassify.Entity = null;
						previousValue.Patents.Remove(this);
					}
					this._PatentClassify.Entity = value;
					if ((value != null))
					{
						value.Patents.Add(this);
						this._PatentClassifyID = value.PatentClassifyID;
					}
					else
					{
						this._PatentClassifyID = default(Nullable<int>);
					}
					this.SendPropertyChanged("PatentClassify");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProjectBase_Patents", Storage="_ProjectBase", ThisKey="ProjectID", OtherKey="ProjectId", IsForeignKey=true, DeleteRule="CASCADE")]
		public ProjectBase ProjectBase
		{
			get
			{
				return this._ProjectBase.Entity;
			}
			set
			{
				ProjectBase previousValue = this._ProjectBase.Entity;
				if (((previousValue != value) 
							|| (this._ProjectBase.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProjectBase.Entity = null;
						previousValue.Patents.Remove(this);
					}
					this._ProjectBase.Entity = value;
					if ((value != null))
					{
						value.Patents.Add(this);
						this._ProjectID = value.ProjectId;
					}
					else
					{
						this._ProjectID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ProjectBase");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RateClassify")]
	public partial class RateClassify : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RateClassifyId;
		
		private string _RateClassify1;
		
		private EntitySet<RateResults> _RateResults;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRateClassifyIdChanging(int value);
    partial void OnRateClassifyIdChanged();
    partial void OnRateClassify1Changing(string value);
    partial void OnRateClassify1Changed();
    #endregion
		
		public RateClassify()
		{
			this._RateResults = new EntitySet<RateResults>(new Action<RateResults>(this.attach_RateResults), new Action<RateResults>(this.detach_RateResults));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RateClassifyId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RateClassifyId
		{
			get
			{
				return this._RateClassifyId;
			}
			set
			{
				if ((this._RateClassifyId != value))
				{
					this.OnRateClassifyIdChanging(value);
					this.SendPropertyChanging();
					this._RateClassifyId = value;
					this.SendPropertyChanged("RateClassifyId");
					this.OnRateClassifyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="RateClassify", Storage="_RateClassify1", DbType="NVarChar(50)")]
		public string RateClassify1
		{
			get
			{
				return this._RateClassify1;
			}
			set
			{
				if ((this._RateClassify1 != value))
				{
					this.OnRateClassify1Changing(value);
					this.SendPropertyChanging();
					this._RateClassify1 = value;
					this.SendPropertyChanged("RateClassify1");
					this.OnRateClassify1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RateClassify_RateResults", Storage="_RateResults", ThisKey="RateClassifyId", OtherKey="RateClassifyID")]
		public EntitySet<RateResults> RateResults
		{
			get
			{
				return this._RateResults;
			}
			set
			{
				this._RateResults.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RateResults(RateResults entity)
		{
			this.SendPropertyChanging();
			entity.RateClassify = this;
		}
		
		private void detach_RateResults(RateResults entity)
		{
			this.SendPropertyChanging();
			entity.RateClassify = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RateResults")]
	public partial class RateResults : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _ProjectID;
		
		private System.Nullable<int> _RateClassifyID;
		
		private string _RateDepartment;
		
		private System.Nullable<System.DateTime> _RateDate;
		
		private string _Note;
		
		private EntityRef<RateClassify> _RateClassify;
		
		private EntityRef<ProjectBase> _ProjectBase;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnProjectIDChanging(System.Nullable<int> value);
    partial void OnProjectIDChanged();
    partial void OnRateClassifyIDChanging(System.Nullable<int> value);
    partial void OnRateClassifyIDChanged();
    partial void OnRateDepartmentChanging(string value);
    partial void OnRateDepartmentChanged();
    partial void OnRateDateChanging(System.Nullable<System.DateTime> value);
    partial void OnRateDateChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    #endregion
		
		public RateResults()
		{
			this._RateClassify = default(EntityRef<RateClassify>);
			this._ProjectBase = default(EntityRef<ProjectBase>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectID", DbType="Int")]
		public System.Nullable<int> ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					if (this._ProjectBase.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectID = value;
					this.SendPropertyChanged("ProjectID");
					this.OnProjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RateClassifyID", DbType="Int")]
		public System.Nullable<int> RateClassifyID
		{
			get
			{
				return this._RateClassifyID;
			}
			set
			{
				if ((this._RateClassifyID != value))
				{
					if (this._RateClassify.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRateClassifyIDChanging(value);
					this.SendPropertyChanging();
					this._RateClassifyID = value;
					this.SendPropertyChanged("RateClassifyID");
					this.OnRateClassifyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RateDepartment", DbType="NVarChar(50)")]
		public string RateDepartment
		{
			get
			{
				return this._RateDepartment;
			}
			set
			{
				if ((this._RateDepartment != value))
				{
					this.OnRateDepartmentChanging(value);
					this.SendPropertyChanging();
					this._RateDepartment = value;
					this.SendPropertyChanged("RateDepartment");
					this.OnRateDepartmentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RateDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> RateDate
		{
			get
			{
				return this._RateDate;
			}
			set
			{
				if ((this._RateDate != value))
				{
					this.OnRateDateChanging(value);
					this.SendPropertyChanging();
					this._RateDate = value;
					this.SendPropertyChanged("RateDate");
					this.OnRateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="NVarChar(50)")]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RateClassify_RateResults", Storage="_RateClassify", ThisKey="RateClassifyID", OtherKey="RateClassifyId", IsForeignKey=true)]
		public RateClassify RateClassify
		{
			get
			{
				return this._RateClassify.Entity;
			}
			set
			{
				RateClassify previousValue = this._RateClassify.Entity;
				if (((previousValue != value) 
							|| (this._RateClassify.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RateClassify.Entity = null;
						previousValue.RateResults.Remove(this);
					}
					this._RateClassify.Entity = value;
					if ((value != null))
					{
						value.RateResults.Add(this);
						this._RateClassifyID = value.RateClassifyId;
					}
					else
					{
						this._RateClassifyID = default(Nullable<int>);
					}
					this.SendPropertyChanged("RateClassify");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProjectBase_RateResults", Storage="_ProjectBase", ThisKey="ProjectID", OtherKey="ProjectId", IsForeignKey=true)]
		public ProjectBase ProjectBase
		{
			get
			{
				return this._ProjectBase.Entity;
			}
			set
			{
				ProjectBase previousValue = this._ProjectBase.Entity;
				if (((previousValue != value) 
							|| (this._ProjectBase.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProjectBase.Entity = null;
						previousValue.RateResults.Remove(this);
					}
					this._ProjectBase.Entity = value;
					if ((value != null))
					{
						value.RateResults.Add(this);
						this._ProjectID = value.ProjectId;
					}
					else
					{
						this._ProjectID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ProjectBase");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Results")]
	public partial class Results : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _ProjectID;
		
		private System.Nullable<System.DateTime> _RegistDate;
		
		private string _RegistNo;
		
		private EntityRef<ProjectBase> _ProjectBase;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnProjectIDChanging(System.Nullable<int> value);
    partial void OnProjectIDChanged();
    partial void OnRegistDateChanging(System.Nullable<System.DateTime> value);
    partial void OnRegistDateChanged();
    partial void OnRegistNoChanging(string value);
    partial void OnRegistNoChanged();
    #endregion
		
		public Results()
		{
			this._ProjectBase = default(EntityRef<ProjectBase>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectID", DbType="Int")]
		public System.Nullable<int> ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					if (this._ProjectBase.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectID = value;
					this.SendPropertyChanged("ProjectID");
					this.OnProjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegistDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> RegistDate
		{
			get
			{
				return this._RegistDate;
			}
			set
			{
				if ((this._RegistDate != value))
				{
					this.OnRegistDateChanging(value);
					this.SendPropertyChanging();
					this._RegistDate = value;
					this.SendPropertyChanged("RegistDate");
					this.OnRegistDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegistNo", DbType="NVarChar(50)")]
		public string RegistNo
		{
			get
			{
				return this._RegistNo;
			}
			set
			{
				if ((this._RegistNo != value))
				{
					this.OnRegistNoChanging(value);
					this.SendPropertyChanging();
					this._RegistNo = value;
					this.SendPropertyChanged("RegistNo");
					this.OnRegistNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProjectBase_Results", Storage="_ProjectBase", ThisKey="ProjectID", OtherKey="ProjectId", IsForeignKey=true)]
		public ProjectBase ProjectBase
		{
			get
			{
				return this._ProjectBase.Entity;
			}
			set
			{
				ProjectBase previousValue = this._ProjectBase.Entity;
				if (((previousValue != value) 
							|| (this._ProjectBase.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProjectBase.Entity = null;
						previousValue.Results.Remove(this);
					}
					this._ProjectBase.Entity = value;
					if ((value != null))
					{
						value.Results.Add(this);
						this._ProjectID = value.ProjectId;
					}
					else
					{
						this._ProjectID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ProjectBase");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Reward")]
	public partial class Reward : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _ProjectID;
		
		private string _RewardName;
		
		private System.Nullable<int> _RewardClassifyID;
		
		private System.Nullable<int> _RewardClassID;
		
		private string _RewardDepartment;
		
		private string _ReawardYear;
		
		private System.Nullable<System.DateTime> _RewardDate;
		
		private string _Department;
		
		private string _Workers;
		
		private string _Note;
		
		private EntityRef<RewardClass> _RewardClass;
		
		private EntityRef<RewardClassify> _RewardClassify;
		
		private EntityRef<ProjectBase> _ProjectBase;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnProjectIDChanging(System.Nullable<int> value);
    partial void OnProjectIDChanged();
    partial void OnRewardNameChanging(string value);
    partial void OnRewardNameChanged();
    partial void OnRewardClassifyIDChanging(System.Nullable<int> value);
    partial void OnRewardClassifyIDChanged();
    partial void OnRewardClassIDChanging(System.Nullable<int> value);
    partial void OnRewardClassIDChanged();
    partial void OnRewardDepartmentChanging(string value);
    partial void OnRewardDepartmentChanged();
    partial void OnReawardYearChanging(string value);
    partial void OnReawardYearChanged();
    partial void OnRewardDateChanging(System.Nullable<System.DateTime> value);
    partial void OnRewardDateChanged();
    partial void OnDepartmentChanging(string value);
    partial void OnDepartmentChanged();
    partial void OnWorkersChanging(string value);
    partial void OnWorkersChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    #endregion
		
		public Reward()
		{
			this._RewardClass = default(EntityRef<RewardClass>);
			this._RewardClassify = default(EntityRef<RewardClassify>);
			this._ProjectBase = default(EntityRef<ProjectBase>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectID", DbType="Int")]
		public System.Nullable<int> ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					if (this._ProjectBase.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectID = value;
					this.SendPropertyChanged("ProjectID");
					this.OnProjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RewardName", DbType="NVarChar(50)")]
		public string RewardName
		{
			get
			{
				return this._RewardName;
			}
			set
			{
				if ((this._RewardName != value))
				{
					this.OnRewardNameChanging(value);
					this.SendPropertyChanging();
					this._RewardName = value;
					this.SendPropertyChanged("RewardName");
					this.OnRewardNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RewardClassifyID", DbType="Int")]
		public System.Nullable<int> RewardClassifyID
		{
			get
			{
				return this._RewardClassifyID;
			}
			set
			{
				if ((this._RewardClassifyID != value))
				{
					if (this._RewardClassify.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRewardClassifyIDChanging(value);
					this.SendPropertyChanging();
					this._RewardClassifyID = value;
					this.SendPropertyChanged("RewardClassifyID");
					this.OnRewardClassifyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RewardClassID", DbType="Int")]
		public System.Nullable<int> RewardClassID
		{
			get
			{
				return this._RewardClassID;
			}
			set
			{
				if ((this._RewardClassID != value))
				{
					if (this._RewardClass.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRewardClassIDChanging(value);
					this.SendPropertyChanging();
					this._RewardClassID = value;
					this.SendPropertyChanged("RewardClassID");
					this.OnRewardClassIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RewardDepartment", DbType="NVarChar(50)")]
		public string RewardDepartment
		{
			get
			{
				return this._RewardDepartment;
			}
			set
			{
				if ((this._RewardDepartment != value))
				{
					this.OnRewardDepartmentChanging(value);
					this.SendPropertyChanging();
					this._RewardDepartment = value;
					this.SendPropertyChanged("RewardDepartment");
					this.OnRewardDepartmentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReawardYear", DbType="NChar(10)")]
		public string ReawardYear
		{
			get
			{
				return this._ReawardYear;
			}
			set
			{
				if ((this._ReawardYear != value))
				{
					this.OnReawardYearChanging(value);
					this.SendPropertyChanging();
					this._ReawardYear = value;
					this.SendPropertyChanged("ReawardYear");
					this.OnReawardYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RewardDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> RewardDate
		{
			get
			{
				return this._RewardDate;
			}
			set
			{
				if ((this._RewardDate != value))
				{
					this.OnRewardDateChanging(value);
					this.SendPropertyChanging();
					this._RewardDate = value;
					this.SendPropertyChanged("RewardDate");
					this.OnRewardDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Department", DbType="NVarChar(50)")]
		public string Department
		{
			get
			{
				return this._Department;
			}
			set
			{
				if ((this._Department != value))
				{
					this.OnDepartmentChanging(value);
					this.SendPropertyChanging();
					this._Department = value;
					this.SendPropertyChanged("Department");
					this.OnDepartmentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Workers", DbType="NVarChar(256)")]
		public string Workers
		{
			get
			{
				return this._Workers;
			}
			set
			{
				if ((this._Workers != value))
				{
					this.OnWorkersChanging(value);
					this.SendPropertyChanging();
					this._Workers = value;
					this.SendPropertyChanged("Workers");
					this.OnWorkersChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="NVarChar(50)")]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RewardClass_Reward", Storage="_RewardClass", ThisKey="RewardClassID", OtherKey="RewardClassId", IsForeignKey=true)]
		public RewardClass RewardClass
		{
			get
			{
				return this._RewardClass.Entity;
			}
			set
			{
				RewardClass previousValue = this._RewardClass.Entity;
				if (((previousValue != value) 
							|| (this._RewardClass.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RewardClass.Entity = null;
						previousValue.Reward.Remove(this);
					}
					this._RewardClass.Entity = value;
					if ((value != null))
					{
						value.Reward.Add(this);
						this._RewardClassID = value.RewardClassId;
					}
					else
					{
						this._RewardClassID = default(Nullable<int>);
					}
					this.SendPropertyChanged("RewardClass");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RewardClassify_Reward", Storage="_RewardClassify", ThisKey="RewardClassifyID", OtherKey="RewardClassifyID", IsForeignKey=true)]
		public RewardClassify RewardClassify
		{
			get
			{
				return this._RewardClassify.Entity;
			}
			set
			{
				RewardClassify previousValue = this._RewardClassify.Entity;
				if (((previousValue != value) 
							|| (this._RewardClassify.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RewardClassify.Entity = null;
						previousValue.Reward.Remove(this);
					}
					this._RewardClassify.Entity = value;
					if ((value != null))
					{
						value.Reward.Add(this);
						this._RewardClassifyID = value.RewardClassifyID;
					}
					else
					{
						this._RewardClassifyID = default(Nullable<int>);
					}
					this.SendPropertyChanged("RewardClassify");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProjectBase_Reward", Storage="_ProjectBase", ThisKey="ProjectID", OtherKey="ProjectId", IsForeignKey=true, DeleteRule="CASCADE")]
		public ProjectBase ProjectBase
		{
			get
			{
				return this._ProjectBase.Entity;
			}
			set
			{
				ProjectBase previousValue = this._ProjectBase.Entity;
				if (((previousValue != value) 
							|| (this._ProjectBase.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProjectBase.Entity = null;
						previousValue.Reward.Remove(this);
					}
					this._ProjectBase.Entity = value;
					if ((value != null))
					{
						value.Reward.Add(this);
						this._ProjectID = value.ProjectId;
					}
					else
					{
						this._ProjectID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ProjectBase");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RewardClass")]
	public partial class RewardClass : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RewardClassId;
		
		private string _RewardClass1;
		
		private EntitySet<Reward> _Reward;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRewardClassIdChanging(int value);
    partial void OnRewardClassIdChanged();
    partial void OnRewardClass1Changing(string value);
    partial void OnRewardClass1Changed();
    #endregion
		
		public RewardClass()
		{
			this._Reward = new EntitySet<Reward>(new Action<Reward>(this.attach_Reward), new Action<Reward>(this.detach_Reward));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RewardClassId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RewardClassId
		{
			get
			{
				return this._RewardClassId;
			}
			set
			{
				if ((this._RewardClassId != value))
				{
					this.OnRewardClassIdChanging(value);
					this.SendPropertyChanging();
					this._RewardClassId = value;
					this.SendPropertyChanged("RewardClassId");
					this.OnRewardClassIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="RewardClass", Storage="_RewardClass1", DbType="NChar(20)")]
		public string RewardClass1
		{
			get
			{
				return this._RewardClass1;
			}
			set
			{
				if ((this._RewardClass1 != value))
				{
					this.OnRewardClass1Changing(value);
					this.SendPropertyChanging();
					this._RewardClass1 = value;
					this.SendPropertyChanged("RewardClass1");
					this.OnRewardClass1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RewardClass_Reward", Storage="_Reward", ThisKey="RewardClassId", OtherKey="RewardClassID")]
		public EntitySet<Reward> Reward
		{
			get
			{
				return this._Reward;
			}
			set
			{
				this._Reward.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Reward(Reward entity)
		{
			this.SendPropertyChanging();
			entity.RewardClass = this;
		}
		
		private void detach_Reward(Reward entity)
		{
			this.SendPropertyChanging();
			entity.RewardClass = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RewardClassify")]
	public partial class RewardClassify : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RewardClassifyID;
		
		private string _RewardClassify1;
		
		private EntitySet<Reward> _Reward;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRewardClassifyIDChanging(int value);
    partial void OnRewardClassifyIDChanged();
    partial void OnRewardClassify1Changing(string value);
    partial void OnRewardClassify1Changed();
    #endregion
		
		public RewardClassify()
		{
			this._Reward = new EntitySet<Reward>(new Action<Reward>(this.attach_Reward), new Action<Reward>(this.detach_Reward));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RewardClassifyID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RewardClassifyID
		{
			get
			{
				return this._RewardClassifyID;
			}
			set
			{
				if ((this._RewardClassifyID != value))
				{
					this.OnRewardClassifyIDChanging(value);
					this.SendPropertyChanging();
					this._RewardClassifyID = value;
					this.SendPropertyChanged("RewardClassifyID");
					this.OnRewardClassifyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="RewardClassify", Storage="_RewardClassify1", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string RewardClassify1
		{
			get
			{
				return this._RewardClassify1;
			}
			set
			{
				if ((this._RewardClassify1 != value))
				{
					this.OnRewardClassify1Changing(value);
					this.SendPropertyChanging();
					this._RewardClassify1 = value;
					this.SendPropertyChanged("RewardClassify1");
					this.OnRewardClassify1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RewardClassify_Reward", Storage="_Reward", ThisKey="RewardClassifyID", OtherKey="RewardClassifyID")]
		public EntitySet<Reward> Reward
		{
			get
			{
				return this._Reward;
			}
			set
			{
				this._Reward.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Reward(Reward entity)
		{
			this.SendPropertyChanging();
			entity.RewardClassify = this;
		}
		
		private void detach_Reward(Reward entity)
		{
			this.SendPropertyChanging();
			entity.RewardClassify = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TeamDepartments")]
	public partial class TeamDepartments : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _ProjectID;
		
		private string _Department;
		
		private EntityRef<ProjectBase> _ProjectBase;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnProjectIDChanging(System.Nullable<int> value);
    partial void OnProjectIDChanged();
    partial void OnDepartmentChanging(string value);
    partial void OnDepartmentChanged();
    #endregion
		
		public TeamDepartments()
		{
			this._ProjectBase = default(EntityRef<ProjectBase>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectID", DbType="Int")]
		public System.Nullable<int> ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					if (this._ProjectBase.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectID = value;
					this.SendPropertyChanged("ProjectID");
					this.OnProjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Department", DbType="NVarChar(50)")]
		public string Department
		{
			get
			{
				return this._Department;
			}
			set
			{
				if ((this._Department != value))
				{
					this.OnDepartmentChanging(value);
					this.SendPropertyChanging();
					this._Department = value;
					this.SendPropertyChanged("Department");
					this.OnDepartmentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProjectBase_TeamDepartments", Storage="_ProjectBase", ThisKey="ProjectID", OtherKey="ProjectId", IsForeignKey=true, DeleteRule="CASCADE")]
		public ProjectBase ProjectBase
		{
			get
			{
				return this._ProjectBase.Entity;
			}
			set
			{
				ProjectBase previousValue = this._ProjectBase.Entity;
				if (((previousValue != value) 
							|| (this._ProjectBase.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProjectBase.Entity = null;
						previousValue.TeamDepartments.Remove(this);
					}
					this._ProjectBase.Entity = value;
					if ((value != null))
					{
						value.TeamDepartments.Add(this);
						this._ProjectID = value.ProjectId;
					}
					else
					{
						this._ProjectID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ProjectBase");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TeamWorkers")]
	public partial class TeamWorkers : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _ProjectID;
		
		private string _WorkerName;
		
		private EntityRef<ProjectBase> _ProjectBase;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnProjectIDChanging(System.Nullable<int> value);
    partial void OnProjectIDChanged();
    partial void OnWorkerNameChanging(string value);
    partial void OnWorkerNameChanged();
    #endregion
		
		public TeamWorkers()
		{
			this._ProjectBase = default(EntityRef<ProjectBase>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectID", DbType="Int")]
		public System.Nullable<int> ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					if (this._ProjectBase.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectID = value;
					this.SendPropertyChanged("ProjectID");
					this.OnProjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkerName", DbType="NVarChar(50)")]
		public string WorkerName
		{
			get
			{
				return this._WorkerName;
			}
			set
			{
				if ((this._WorkerName != value))
				{
					this.OnWorkerNameChanging(value);
					this.SendPropertyChanging();
					this._WorkerName = value;
					this.SendPropertyChanged("WorkerName");
					this.OnWorkerNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProjectBase_TeamWorkers", Storage="_ProjectBase", ThisKey="ProjectID", OtherKey="ProjectId", IsForeignKey=true)]
		public ProjectBase ProjectBase
		{
			get
			{
				return this._ProjectBase.Entity;
			}
			set
			{
				ProjectBase previousValue = this._ProjectBase.Entity;
				if (((previousValue != value) 
							|| (this._ProjectBase.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProjectBase.Entity = null;
						previousValue.TeamWorkers.Remove(this);
					}
					this._ProjectBase.Entity = value;
					if ((value != null))
					{
						value.TeamWorkers.Add(this);
						this._ProjectID = value.ProjectId;
					}
					else
					{
						this._ProjectID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ProjectBase");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProjectBase")]
	public partial class ProjectBase : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProjectId;
		
		private System.Nullable<int> _ParentID;
		
		private System.Nullable<int> _ProjectClassifyID;
		
		private string _ProjectNo;
		
		private string _ContractNo;
		
		private string _FirstParty;
		
		private string _SecondParty;
		
		private string _SetupYear;
		
		private string _ProjectName;
		
		private System.Nullable<System.DateTime> _StartDate;
		
		private System.Nullable<System.DateTime> _PlanFinishDate;
		
		private System.Nullable<System.DateTime> _FinishDate;
		
		private string _Principal;
		
		private System.Nullable<decimal> _SumMoney;
		
		private System.Nullable<decimal> _Ministry;
		
		private System.Nullable<decimal> _Transportation;
		
		private System.Nullable<decimal> _Science;
		
		private System.Nullable<decimal> _SupportEngineering;
		
		private System.Nullable<decimal> _Other;
		
		private System.Nullable<decimal> _AuthorizeMoney;
		
		private string _AnchoredDepartment;
		
		private System.Nullable<bool> _IsMainResearch;
		
		private string _IsKnot;
		
		private System.Nullable<bool> _IsFiled;
		
		private string _Note;
		
		private EntitySet<Funds> _Funds;
		
		private EntitySet<Patents> _Patents;
		
		private EntitySet<RateResults> _RateResults;
		
		private EntitySet<Results> _Results;
		
		private EntitySet<Reward> _Reward;
		
		private EntitySet<TeamDepartments> _TeamDepartments;
		
		private EntitySet<TeamWorkers> _TeamWorkers;
		
		private EntitySet<ProjectBase> _ProjectBase2;
		
		private EntitySet<ProjectContracts> _ProjectContracts;
		
		private EntityRef<ProjectBase> _ProjectBase1;
		
		private EntityRef<ProjectClassify> _ProjectClassify;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProjectIdChanging(int value);
    partial void OnProjectIdChanged();
    partial void OnParentIDChanging(System.Nullable<int> value);
    partial void OnParentIDChanged();
    partial void OnProjectClassifyIDChanging(System.Nullable<int> value);
    partial void OnProjectClassifyIDChanged();
    partial void OnProjectNoChanging(string value);
    partial void OnProjectNoChanged();
    partial void OnContractNoChanging(string value);
    partial void OnContractNoChanged();
    partial void OnFirstPartyChanging(string value);
    partial void OnFirstPartyChanged();
    partial void OnSecondPartyChanging(string value);
    partial void OnSecondPartyChanged();
    partial void OnSetupYearChanging(string value);
    partial void OnSetupYearChanged();
    partial void OnProjectNameChanging(string value);
    partial void OnProjectNameChanged();
    partial void OnStartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnStartDateChanged();
    partial void OnPlanFinishDateChanging(System.Nullable<System.DateTime> value);
    partial void OnPlanFinishDateChanged();
    partial void OnFinishDateChanging(System.Nullable<System.DateTime> value);
    partial void OnFinishDateChanged();
    partial void OnPrincipalChanging(string value);
    partial void OnPrincipalChanged();
    partial void OnSumMoneyChanging(System.Nullable<decimal> value);
    partial void OnSumMoneyChanged();
    partial void OnMinistryChanging(System.Nullable<decimal> value);
    partial void OnMinistryChanged();
    partial void OnTransportationChanging(System.Nullable<decimal> value);
    partial void OnTransportationChanged();
    partial void OnScienceChanging(System.Nullable<decimal> value);
    partial void OnScienceChanged();
    partial void OnSupportEngineeringChanging(System.Nullable<decimal> value);
    partial void OnSupportEngineeringChanged();
    partial void OnOtherChanging(System.Nullable<decimal> value);
    partial void OnOtherChanged();
    partial void OnAuthorizeMoneyChanging(System.Nullable<decimal> value);
    partial void OnAuthorizeMoneyChanged();
    partial void OnAnchoredDepartmentChanging(string value);
    partial void OnAnchoredDepartmentChanged();
    partial void OnIsMainResearchChanging(System.Nullable<bool> value);
    partial void OnIsMainResearchChanged();
    partial void OnIsKnotChanging(string value);
    partial void OnIsKnotChanged();
    partial void OnIsFiledChanging(System.Nullable<bool> value);
    partial void OnIsFiledChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    #endregion
		
		public ProjectBase()
		{
			this._Funds = new EntitySet<Funds>(new Action<Funds>(this.attach_Funds), new Action<Funds>(this.detach_Funds));
			this._Patents = new EntitySet<Patents>(new Action<Patents>(this.attach_Patents), new Action<Patents>(this.detach_Patents));
			this._RateResults = new EntitySet<RateResults>(new Action<RateResults>(this.attach_RateResults), new Action<RateResults>(this.detach_RateResults));
			this._Results = new EntitySet<Results>(new Action<Results>(this.attach_Results), new Action<Results>(this.detach_Results));
			this._Reward = new EntitySet<Reward>(new Action<Reward>(this.attach_Reward), new Action<Reward>(this.detach_Reward));
			this._TeamDepartments = new EntitySet<TeamDepartments>(new Action<TeamDepartments>(this.attach_TeamDepartments), new Action<TeamDepartments>(this.detach_TeamDepartments));
			this._TeamWorkers = new EntitySet<TeamWorkers>(new Action<TeamWorkers>(this.attach_TeamWorkers), new Action<TeamWorkers>(this.detach_TeamWorkers));
			this._ProjectBase2 = new EntitySet<ProjectBase>(new Action<ProjectBase>(this.attach_ProjectBase2), new Action<ProjectBase>(this.detach_ProjectBase2));
			this._ProjectContracts = new EntitySet<ProjectContracts>(new Action<ProjectContracts>(this.attach_ProjectContracts), new Action<ProjectContracts>(this.detach_ProjectContracts));
			this._ProjectBase1 = default(EntityRef<ProjectBase>);
			this._ProjectClassify = default(EntityRef<ProjectClassify>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProjectId
		{
			get
			{
				return this._ProjectId;
			}
			set
			{
				if ((this._ProjectId != value))
				{
					this.OnProjectIdChanging(value);
					this.SendPropertyChanging();
					this._ProjectId = value;
					this.SendPropertyChanged("ProjectId");
					this.OnProjectIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentID", DbType="Int")]
		public System.Nullable<int> ParentID
		{
			get
			{
				return this._ParentID;
			}
			set
			{
				if ((this._ParentID != value))
				{
					if (this._ProjectBase1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentIDChanging(value);
					this.SendPropertyChanging();
					this._ParentID = value;
					this.SendPropertyChanged("ParentID");
					this.OnParentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectClassifyID", DbType="Int")]
		public System.Nullable<int> ProjectClassifyID
		{
			get
			{
				return this._ProjectClassifyID;
			}
			set
			{
				if ((this._ProjectClassifyID != value))
				{
					if (this._ProjectClassify.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectClassifyIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectClassifyID = value;
					this.SendPropertyChanged("ProjectClassifyID");
					this.OnProjectClassifyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectNo", DbType="NVarChar(50)")]
		public string ProjectNo
		{
			get
			{
				return this._ProjectNo;
			}
			set
			{
				if ((this._ProjectNo != value))
				{
					this.OnProjectNoChanging(value);
					this.SendPropertyChanging();
					this._ProjectNo = value;
					this.SendPropertyChanged("ProjectNo");
					this.OnProjectNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContractNo", DbType="NVarChar(50)")]
		public string ContractNo
		{
			get
			{
				return this._ContractNo;
			}
			set
			{
				if ((this._ContractNo != value))
				{
					this.OnContractNoChanging(value);
					this.SendPropertyChanging();
					this._ContractNo = value;
					this.SendPropertyChanged("ContractNo");
					this.OnContractNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstParty", DbType="NVarChar(50)")]
		public string FirstParty
		{
			get
			{
				return this._FirstParty;
			}
			set
			{
				if ((this._FirstParty != value))
				{
					this.OnFirstPartyChanging(value);
					this.SendPropertyChanging();
					this._FirstParty = value;
					this.SendPropertyChanged("FirstParty");
					this.OnFirstPartyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SecondParty", DbType="NVarChar(50)")]
		public string SecondParty
		{
			get
			{
				return this._SecondParty;
			}
			set
			{
				if ((this._SecondParty != value))
				{
					this.OnSecondPartyChanging(value);
					this.SendPropertyChanging();
					this._SecondParty = value;
					this.SendPropertyChanged("SecondParty");
					this.OnSecondPartyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SetupYear", DbType="NChar(10)")]
		public string SetupYear
		{
			get
			{
				return this._SetupYear;
			}
			set
			{
				if ((this._SetupYear != value))
				{
					this.OnSetupYearChanging(value);
					this.SendPropertyChanging();
					this._SetupYear = value;
					this.SendPropertyChanged("SetupYear");
					this.OnSetupYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectName", DbType="NVarChar(256)")]
		public string ProjectName
		{
			get
			{
				return this._ProjectName;
			}
			set
			{
				if ((this._ProjectName != value))
				{
					this.OnProjectNameChanging(value);
					this.SendPropertyChanging();
					this._ProjectName = value;
					this.SendPropertyChanged("ProjectName");
					this.OnProjectNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlanFinishDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> PlanFinishDate
		{
			get
			{
				return this._PlanFinishDate;
			}
			set
			{
				if ((this._PlanFinishDate != value))
				{
					this.OnPlanFinishDateChanging(value);
					this.SendPropertyChanging();
					this._PlanFinishDate = value;
					this.SendPropertyChanged("PlanFinishDate");
					this.OnPlanFinishDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FinishDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> FinishDate
		{
			get
			{
				return this._FinishDate;
			}
			set
			{
				if ((this._FinishDate != value))
				{
					this.OnFinishDateChanging(value);
					this.SendPropertyChanging();
					this._FinishDate = value;
					this.SendPropertyChanged("FinishDate");
					this.OnFinishDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Principal", DbType="NVarChar(20)")]
		public string Principal
		{
			get
			{
				return this._Principal;
			}
			set
			{
				if ((this._Principal != value))
				{
					this.OnPrincipalChanging(value);
					this.SendPropertyChanging();
					this._Principal = value;
					this.SendPropertyChanged("Principal");
					this.OnPrincipalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SumMoney", DbType="Money")]
		public System.Nullable<decimal> SumMoney
		{
			get
			{
				return this._SumMoney;
			}
			set
			{
				if ((this._SumMoney != value))
				{
					this.OnSumMoneyChanging(value);
					this.SendPropertyChanging();
					this._SumMoney = value;
					this.SendPropertyChanged("SumMoney");
					this.OnSumMoneyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ministry", DbType="Money")]
		public System.Nullable<decimal> Ministry
		{
			get
			{
				return this._Ministry;
			}
			set
			{
				if ((this._Ministry != value))
				{
					this.OnMinistryChanging(value);
					this.SendPropertyChanging();
					this._Ministry = value;
					this.SendPropertyChanged("Ministry");
					this.OnMinistryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Transportation", DbType="Money")]
		public System.Nullable<decimal> Transportation
		{
			get
			{
				return this._Transportation;
			}
			set
			{
				if ((this._Transportation != value))
				{
					this.OnTransportationChanging(value);
					this.SendPropertyChanging();
					this._Transportation = value;
					this.SendPropertyChanged("Transportation");
					this.OnTransportationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Science", DbType="Money")]
		public System.Nullable<decimal> Science
		{
			get
			{
				return this._Science;
			}
			set
			{
				if ((this._Science != value))
				{
					this.OnScienceChanging(value);
					this.SendPropertyChanging();
					this._Science = value;
					this.SendPropertyChanged("Science");
					this.OnScienceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SupportEngineering", DbType="Money")]
		public System.Nullable<decimal> SupportEngineering
		{
			get
			{
				return this._SupportEngineering;
			}
			set
			{
				if ((this._SupportEngineering != value))
				{
					this.OnSupportEngineeringChanging(value);
					this.SendPropertyChanging();
					this._SupportEngineering = value;
					this.SendPropertyChanged("SupportEngineering");
					this.OnSupportEngineeringChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Other", DbType="Money")]
		public System.Nullable<decimal> Other
		{
			get
			{
				return this._Other;
			}
			set
			{
				if ((this._Other != value))
				{
					this.OnOtherChanging(value);
					this.SendPropertyChanging();
					this._Other = value;
					this.SendPropertyChanged("Other");
					this.OnOtherChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AuthorizeMoney", DbType="Money")]
		public System.Nullable<decimal> AuthorizeMoney
		{
			get
			{
				return this._AuthorizeMoney;
			}
			set
			{
				if ((this._AuthorizeMoney != value))
				{
					this.OnAuthorizeMoneyChanging(value);
					this.SendPropertyChanging();
					this._AuthorizeMoney = value;
					this.SendPropertyChanged("AuthorizeMoney");
					this.OnAuthorizeMoneyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AnchoredDepartment", DbType="NVarChar(20)")]
		public string AnchoredDepartment
		{
			get
			{
				return this._AnchoredDepartment;
			}
			set
			{
				if ((this._AnchoredDepartment != value))
				{
					this.OnAnchoredDepartmentChanging(value);
					this.SendPropertyChanging();
					this._AnchoredDepartment = value;
					this.SendPropertyChanged("AnchoredDepartment");
					this.OnAnchoredDepartmentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsMainResearch", DbType="Bit")]
		public System.Nullable<bool> IsMainResearch
		{
			get
			{
				return this._IsMainResearch;
			}
			set
			{
				if ((this._IsMainResearch != value))
				{
					this.OnIsMainResearchChanging(value);
					this.SendPropertyChanging();
					this._IsMainResearch = value;
					this.SendPropertyChanged("IsMainResearch");
					this.OnIsMainResearchChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsKnot", DbType="NVarChar(20)")]
		public string IsKnot
		{
			get
			{
				return this._IsKnot;
			}
			set
			{
				if ((this._IsKnot != value))
				{
					this.OnIsKnotChanging(value);
					this.SendPropertyChanging();
					this._IsKnot = value;
					this.SendPropertyChanged("IsKnot");
					this.OnIsKnotChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsFiled", DbType="Bit")]
		public System.Nullable<bool> IsFiled
		{
			get
			{
				return this._IsFiled;
			}
			set
			{
				if ((this._IsFiled != value))
				{
					this.OnIsFiledChanging(value);
					this.SendPropertyChanging();
					this._IsFiled = value;
					this.SendPropertyChanged("IsFiled");
					this.OnIsFiledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="NVarChar(128)")]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProjectBase_Funds", Storage="_Funds", ThisKey="ProjectId", OtherKey="ProjectID")]
		public EntitySet<Funds> Funds
		{
			get
			{
				return this._Funds;
			}
			set
			{
				this._Funds.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProjectBase_Patents", Storage="_Patents", ThisKey="ProjectId", OtherKey="ProjectID")]
		public EntitySet<Patents> Patents
		{
			get
			{
				return this._Patents;
			}
			set
			{
				this._Patents.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProjectBase_RateResults", Storage="_RateResults", ThisKey="ProjectId", OtherKey="ProjectID")]
		public EntitySet<RateResults> RateResults
		{
			get
			{
				return this._RateResults;
			}
			set
			{
				this._RateResults.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProjectBase_Results", Storage="_Results", ThisKey="ProjectId", OtherKey="ProjectID")]
		public EntitySet<Results> Results
		{
			get
			{
				return this._Results;
			}
			set
			{
				this._Results.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProjectBase_Reward", Storage="_Reward", ThisKey="ProjectId", OtherKey="ProjectID")]
		public EntitySet<Reward> Reward
		{
			get
			{
				return this._Reward;
			}
			set
			{
				this._Reward.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProjectBase_TeamDepartments", Storage="_TeamDepartments", ThisKey="ProjectId", OtherKey="ProjectID")]
		public EntitySet<TeamDepartments> TeamDepartments
		{
			get
			{
				return this._TeamDepartments;
			}
			set
			{
				this._TeamDepartments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProjectBase_TeamWorkers", Storage="_TeamWorkers", ThisKey="ProjectId", OtherKey="ProjectID")]
		public EntitySet<TeamWorkers> TeamWorkers
		{
			get
			{
				return this._TeamWorkers;
			}
			set
			{
				this._TeamWorkers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProjectBase_ProjectBase", Storage="_ProjectBase2", ThisKey="ProjectId", OtherKey="ParentID")]
		public EntitySet<ProjectBase> ProjectBase2
		{
			get
			{
				return this._ProjectBase2;
			}
			set
			{
				this._ProjectBase2.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProjectBase_ProjectContracts", Storage="_ProjectContracts", ThisKey="ProjectId", OtherKey="ProjectID")]
		public EntitySet<ProjectContracts> ProjectContracts
		{
			get
			{
				return this._ProjectContracts;
			}
			set
			{
				this._ProjectContracts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProjectBase_ProjectBase", Storage="_ProjectBase1", ThisKey="ParentID", OtherKey="ProjectId", IsForeignKey=true)]
		public ProjectBase ProjectBase1
		{
			get
			{
				return this._ProjectBase1.Entity;
			}
			set
			{
				ProjectBase previousValue = this._ProjectBase1.Entity;
				if (((previousValue != value) 
							|| (this._ProjectBase1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProjectBase1.Entity = null;
						previousValue.ProjectBase2.Remove(this);
					}
					this._ProjectBase1.Entity = value;
					if ((value != null))
					{
						value.ProjectBase2.Add(this);
						this._ParentID = value.ProjectId;
					}
					else
					{
						this._ParentID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ProjectBase1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProjectClassify_ProjectBase", Storage="_ProjectClassify", ThisKey="ProjectClassifyID", OtherKey="ClassifyId", IsForeignKey=true)]
		public ProjectClassify ProjectClassify
		{
			get
			{
				return this._ProjectClassify.Entity;
			}
			set
			{
				ProjectClassify previousValue = this._ProjectClassify.Entity;
				if (((previousValue != value) 
							|| (this._ProjectClassify.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProjectClassify.Entity = null;
						previousValue.ProjectBase.Remove(this);
					}
					this._ProjectClassify.Entity = value;
					if ((value != null))
					{
						value.ProjectBase.Add(this);
						this._ProjectClassifyID = value.ClassifyId;
					}
					else
					{
						this._ProjectClassifyID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ProjectClassify");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Funds(Funds entity)
		{
			this.SendPropertyChanging();
			entity.ProjectBase = this;
		}
		
		private void detach_Funds(Funds entity)
		{
			this.SendPropertyChanging();
			entity.ProjectBase = null;
		}
		
		private void attach_Patents(Patents entity)
		{
			this.SendPropertyChanging();
			entity.ProjectBase = this;
		}
		
		private void detach_Patents(Patents entity)
		{
			this.SendPropertyChanging();
			entity.ProjectBase = null;
		}
		
		private void attach_RateResults(RateResults entity)
		{
			this.SendPropertyChanging();
			entity.ProjectBase = this;
		}
		
		private void detach_RateResults(RateResults entity)
		{
			this.SendPropertyChanging();
			entity.ProjectBase = null;
		}
		
		private void attach_Results(Results entity)
		{
			this.SendPropertyChanging();
			entity.ProjectBase = this;
		}
		
		private void detach_Results(Results entity)
		{
			this.SendPropertyChanging();
			entity.ProjectBase = null;
		}
		
		private void attach_Reward(Reward entity)
		{
			this.SendPropertyChanging();
			entity.ProjectBase = this;
		}
		
		private void detach_Reward(Reward entity)
		{
			this.SendPropertyChanging();
			entity.ProjectBase = null;
		}
		
		private void attach_TeamDepartments(TeamDepartments entity)
		{
			this.SendPropertyChanging();
			entity.ProjectBase = this;
		}
		
		private void detach_TeamDepartments(TeamDepartments entity)
		{
			this.SendPropertyChanging();
			entity.ProjectBase = null;
		}
		
		private void attach_TeamWorkers(TeamWorkers entity)
		{
			this.SendPropertyChanging();
			entity.ProjectBase = this;
		}
		
		private void detach_TeamWorkers(TeamWorkers entity)
		{
			this.SendPropertyChanging();
			entity.ProjectBase = null;
		}
		
		private void attach_ProjectBase2(ProjectBase entity)
		{
			this.SendPropertyChanging();
			entity.ProjectBase1 = this;
		}
		
		private void detach_ProjectBase2(ProjectBase entity)
		{
			this.SendPropertyChanging();
			entity.ProjectBase1 = null;
		}
		
		private void attach_ProjectContracts(ProjectContracts entity)
		{
			this.SendPropertyChanging();
			entity.ProjectBase = this;
		}
		
		private void detach_ProjectContracts(ProjectContracts entity)
		{
			this.SendPropertyChanging();
			entity.ProjectBase = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.View_Funds")]
	public partial class View_Funds
	{
		
		private string _FundClassify;
		
		private System.Nullable<int> _ProjectID;
		
		private string _Source;
		
		private System.Nullable<decimal> _Money;
		
		private System.Nullable<System.DateTime> _Date;
		
		private string _Handled;
		
		private string _SubPrincipal;
		
		public View_Funds()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FundClassify", DbType="NVarChar(20)")]
		public string FundClassify
		{
			get
			{
				return this._FundClassify;
			}
			set
			{
				if ((this._FundClassify != value))
				{
					this._FundClassify = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectID", DbType="Int")]
		public System.Nullable<int> ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					this._ProjectID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Source", DbType="NVarChar(50)")]
		public string Source
		{
			get
			{
				return this._Source;
			}
			set
			{
				if ((this._Source != value))
				{
					this._Source = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Money", DbType="Money")]
		public System.Nullable<decimal> Money
		{
			get
			{
				return this._Money;
			}
			set
			{
				if ((this._Money != value))
				{
					this._Money = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this._Date = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Handled", DbType="NChar(10)")]
		public string Handled
		{
			get
			{
				return this._Handled;
			}
			set
			{
				if ((this._Handled != value))
				{
					this._Handled = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubPrincipal", DbType="NChar(10)")]
		public string SubPrincipal
		{
			get
			{
				return this._SubPrincipal;
			}
			set
			{
				if ((this._SubPrincipal != value))
				{
					this._SubPrincipal = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.View_Rewards")]
	public partial class View_Rewards
	{
		
		private string _RewardClass;
		
		private string _RewardClassify;
		
		private System.Nullable<int> _ProjectID;
		
		private string _RewardName;
		
		private string _RewardDepartment;
		
		private string _ReawardYear;
		
		private System.Nullable<System.DateTime> _RewardDate;
		
		private string _Department;
		
		private string _Workers;
		
		private string _Note;
		
		public View_Rewards()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RewardClass", DbType="NChar(20)")]
		public string RewardClass
		{
			get
			{
				return this._RewardClass;
			}
			set
			{
				if ((this._RewardClass != value))
				{
					this._RewardClass = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RewardClassify", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string RewardClassify
		{
			get
			{
				return this._RewardClassify;
			}
			set
			{
				if ((this._RewardClassify != value))
				{
					this._RewardClassify = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectID", DbType="Int")]
		public System.Nullable<int> ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					this._ProjectID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RewardName", DbType="NVarChar(50)")]
		public string RewardName
		{
			get
			{
				return this._RewardName;
			}
			set
			{
				if ((this._RewardName != value))
				{
					this._RewardName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RewardDepartment", DbType="NVarChar(50)")]
		public string RewardDepartment
		{
			get
			{
				return this._RewardDepartment;
			}
			set
			{
				if ((this._RewardDepartment != value))
				{
					this._RewardDepartment = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReawardYear", DbType="NChar(10)")]
		public string ReawardYear
		{
			get
			{
				return this._ReawardYear;
			}
			set
			{
				if ((this._ReawardYear != value))
				{
					this._ReawardYear = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RewardDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> RewardDate
		{
			get
			{
				return this._RewardDate;
			}
			set
			{
				if ((this._RewardDate != value))
				{
					this._RewardDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Department", DbType="NVarChar(50)")]
		public string Department
		{
			get
			{
				return this._Department;
			}
			set
			{
				if ((this._Department != value))
				{
					this._Department = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Workers", DbType="NVarChar(256)")]
		public string Workers
		{
			get
			{
				return this._Workers;
			}
			set
			{
				if ((this._Workers != value))
				{
					this._Workers = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="NVarChar(50)")]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this._Note = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.View_Patents")]
	public partial class View_Patents
	{
		
		private string _PatentClassify;
		
		private System.Nullable<int> _ProjectID;
		
		private string _PatentNo;
		
		private string _PatentName;
		
		private string _PatendDepartment;
		
		private string _Note;
		
		private System.Nullable<System.DateTime> _PatentDate;
		
		public View_Patents()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatentClassify", DbType="NVarChar(50)")]
		public string PatentClassify
		{
			get
			{
				return this._PatentClassify;
			}
			set
			{
				if ((this._PatentClassify != value))
				{
					this._PatentClassify = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectID", DbType="Int")]
		public System.Nullable<int> ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					this._ProjectID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatentNo", DbType="NVarChar(50)")]
		public string PatentNo
		{
			get
			{
				return this._PatentNo;
			}
			set
			{
				if ((this._PatentNo != value))
				{
					this._PatentNo = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatentName", DbType="NVarChar(128)")]
		public string PatentName
		{
			get
			{
				return this._PatentName;
			}
			set
			{
				if ((this._PatentName != value))
				{
					this._PatentName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatendDepartment", DbType="NVarChar(50)")]
		public string PatendDepartment
		{
			get
			{
				return this._PatendDepartment;
			}
			set
			{
				if ((this._PatendDepartment != value))
				{
					this._PatendDepartment = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="NVarChar(50)")]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this._Note = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatentDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> PatentDate
		{
			get
			{
				return this._PatentDate;
			}
			set
			{
				if ((this._PatentDate != value))
				{
					this._PatentDate = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.View_Rates")]
	public partial class View_Rates
	{
		
		private string _RateClassify;
		
		private System.Nullable<int> _ProjectID;
		
		private string _RateDepartment;
		
		private System.Nullable<System.DateTime> _RateDate;
		
		private string _Note;
		
		public View_Rates()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RateClassify", DbType="NVarChar(50)")]
		public string RateClassify
		{
			get
			{
				return this._RateClassify;
			}
			set
			{
				if ((this._RateClassify != value))
				{
					this._RateClassify = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectID", DbType="Int")]
		public System.Nullable<int> ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					this._ProjectID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RateDepartment", DbType="NVarChar(50)")]
		public string RateDepartment
		{
			get
			{
				return this._RateDepartment;
			}
			set
			{
				if ((this._RateDepartment != value))
				{
					this._RateDepartment = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RateDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> RateDate
		{
			get
			{
				return this._RateDate;
			}
			set
			{
				if ((this._RateDate != value))
				{
					this._RateDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="NVarChar(50)")]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this._Note = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ExcelFileType")]
	public partial class ExcelFileType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _ExcelFileType1;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnExcelFileType1Changing(string value);
    partial void OnExcelFileType1Changed();
    #endregion
		
		public ExcelFileType()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="ExcelFileType", Storage="_ExcelFileType1", DbType="NVarChar(50)")]
		public string ExcelFileType1
		{
			get
			{
				return this._ExcelFileType1;
			}
			set
			{
				if ((this._ExcelFileType1 != value))
				{
					this.OnExcelFileType1Changing(value);
					this.SendPropertyChanging();
					this._ExcelFileType1 = value;
					this.SendPropertyChanged("ExcelFileType1");
					this.OnExcelFileType1Changed();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.View_SubTotalFund")]
	public partial class View_SubTotalFund
	{
		
		private System.Nullable<bool> _IncomeOrPay;
		
		private System.Nullable<decimal> _SubTotalMoney;
		
		private string _FundClassify;
		
		private System.Nullable<int> _ProjectID;
		
		public View_SubTotalFund()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IncomeOrPay", DbType="Bit")]
		public System.Nullable<bool> IncomeOrPay
		{
			get
			{
				return this._IncomeOrPay;
			}
			set
			{
				if ((this._IncomeOrPay != value))
				{
					this._IncomeOrPay = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubTotalMoney", DbType="Money")]
		public System.Nullable<decimal> SubTotalMoney
		{
			get
			{
				return this._SubTotalMoney;
			}
			set
			{
				if ((this._SubTotalMoney != value))
				{
					this._SubTotalMoney = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FundClassify", DbType="NVarChar(20)")]
		public string FundClassify
		{
			get
			{
				return this._FundClassify;
			}
			set
			{
				if ((this._FundClassify != value))
				{
					this._FundClassify = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectID", DbType="Int")]
		public System.Nullable<int> ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					this._ProjectID = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.View_ProjectFundClassifies")]
	public partial class View_ProjectFundClassifies
	{
		
		private System.Nullable<int> _FundClassifyID;
		
		private System.Nullable<int> _ProjectID;
		
		public View_ProjectFundClassifies()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FundClassifyID", DbType="Int")]
		public System.Nullable<int> FundClassifyID
		{
			get
			{
				return this._FundClassifyID;
			}
			set
			{
				if ((this._FundClassifyID != value))
				{
					this._FundClassifyID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectID", DbType="Int")]
		public System.Nullable<int> ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					this._ProjectID = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.View_ProjectFundSumIncoming")]
	public partial class View_ProjectFundSumIncoming
	{
		
		private System.Nullable<int> _ProjectID;
		
		private System.Nullable<decimal> _SumMoney;
		
		private string _FundClassify;
		
		private System.Nullable<bool> _IncomeOrPay;
		
		public View_ProjectFundSumIncoming()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectID", DbType="Int")]
		public System.Nullable<int> ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					this._ProjectID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SumMoney", DbType="Money")]
		public System.Nullable<decimal> SumMoney
		{
			get
			{
				return this._SumMoney;
			}
			set
			{
				if ((this._SumMoney != value))
				{
					this._SumMoney = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FundClassify", DbType="NVarChar(20)")]
		public string FundClassify
		{
			get
			{
				return this._FundClassify;
			}
			set
			{
				if ((this._FundClassify != value))
				{
					this._FundClassify = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IncomeOrPay", DbType="Bit")]
		public System.Nullable<bool> IncomeOrPay
		{
			get
			{
				return this._IncomeOrPay;
			}
			set
			{
				if ((this._IncomeOrPay != value))
				{
					this._IncomeOrPay = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ContractTypes")]
	public partial class ContractTypes : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TypeID;
		
		private string _ContractType;
		
		private EntitySet<ProjectContracts> _ProjectContracts;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTypeIDChanging(int value);
    partial void OnTypeIDChanged();
    partial void OnContractTypeChanging(string value);
    partial void OnContractTypeChanged();
    #endregion
		
		public ContractTypes()
		{
			this._ProjectContracts = new EntitySet<ProjectContracts>(new Action<ProjectContracts>(this.attach_ProjectContracts), new Action<ProjectContracts>(this.detach_ProjectContracts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TypeID
		{
			get
			{
				return this._TypeID;
			}
			set
			{
				if ((this._TypeID != value))
				{
					this.OnTypeIDChanging(value);
					this.SendPropertyChanging();
					this._TypeID = value;
					this.SendPropertyChanged("TypeID");
					this.OnTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContractType", DbType="NVarChar(20)")]
		public string ContractType
		{
			get
			{
				return this._ContractType;
			}
			set
			{
				if ((this._ContractType != value))
				{
					this.OnContractTypeChanging(value);
					this.SendPropertyChanging();
					this._ContractType = value;
					this.SendPropertyChanged("ContractType");
					this.OnContractTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ContractTypes_ProjectContracts", Storage="_ProjectContracts", ThisKey="TypeID", OtherKey="TypeID")]
		public EntitySet<ProjectContracts> ProjectContracts
		{
			get
			{
				return this._ProjectContracts;
			}
			set
			{
				this._ProjectContracts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProjectContracts(ProjectContracts entity)
		{
			this.SendPropertyChanging();
			entity.ContractTypes = this;
		}
		
		private void detach_ProjectContracts(ProjectContracts entity)
		{
			this.SendPropertyChanging();
			entity.ContractTypes = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProjectContracts")]
	public partial class ProjectContracts : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _TypeID;
		
		private System.Nullable<int> _ProjectID;
		
		private string _ContractNo;
		
		private string _ProjectName;
		
		private string _FirstParty;
		
		private string _SecondParty;
		
		private string _ContractPeriod;
		
		private string _Principal;
		
		private System.Nullable<decimal> _SumMoney;
		
		private System.Nullable<System.DateTime> _ContractDate;
		
		private string _Note;
		
		private EntityRef<ContractTypes> _ContractTypes;
		
		private EntityRef<ProjectBase> _ProjectBase;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTypeIDChanging(System.Nullable<int> value);
    partial void OnTypeIDChanged();
    partial void OnProjectIDChanging(System.Nullable<int> value);
    partial void OnProjectIDChanged();
    partial void OnContractNoChanging(string value);
    partial void OnContractNoChanged();
    partial void OnProjectNameChanging(string value);
    partial void OnProjectNameChanged();
    partial void OnFirstPartyChanging(string value);
    partial void OnFirstPartyChanged();
    partial void OnSecondPartyChanging(string value);
    partial void OnSecondPartyChanged();
    partial void OnContractPeriodChanging(string value);
    partial void OnContractPeriodChanged();
    partial void OnPrincipalChanging(string value);
    partial void OnPrincipalChanged();
    partial void OnSumMoneyChanging(System.Nullable<decimal> value);
    partial void OnSumMoneyChanged();
    partial void OnContractDateChanging(System.Nullable<System.DateTime> value);
    partial void OnContractDateChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    #endregion
		
		public ProjectContracts()
		{
			this._ContractTypes = default(EntityRef<ContractTypes>);
			this._ProjectBase = default(EntityRef<ProjectBase>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeID", DbType="Int")]
		public System.Nullable<int> TypeID
		{
			get
			{
				return this._TypeID;
			}
			set
			{
				if ((this._TypeID != value))
				{
					if (this._ContractTypes.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTypeIDChanging(value);
					this.SendPropertyChanging();
					this._TypeID = value;
					this.SendPropertyChanged("TypeID");
					this.OnTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectID", DbType="Int")]
		public System.Nullable<int> ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					if (this._ProjectBase.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectID = value;
					this.SendPropertyChanged("ProjectID");
					this.OnProjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContractNo", DbType="NVarChar(50)")]
		public string ContractNo
		{
			get
			{
				return this._ContractNo;
			}
			set
			{
				if ((this._ContractNo != value))
				{
					this.OnContractNoChanging(value);
					this.SendPropertyChanging();
					this._ContractNo = value;
					this.SendPropertyChanged("ContractNo");
					this.OnContractNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectName", DbType="NVarChar(256)")]
		public string ProjectName
		{
			get
			{
				return this._ProjectName;
			}
			set
			{
				if ((this._ProjectName != value))
				{
					this.OnProjectNameChanging(value);
					this.SendPropertyChanging();
					this._ProjectName = value;
					this.SendPropertyChanged("ProjectName");
					this.OnProjectNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstParty", DbType="NVarChar(100)")]
		public string FirstParty
		{
			get
			{
				return this._FirstParty;
			}
			set
			{
				if ((this._FirstParty != value))
				{
					this.OnFirstPartyChanging(value);
					this.SendPropertyChanging();
					this._FirstParty = value;
					this.SendPropertyChanged("FirstParty");
					this.OnFirstPartyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SecondParty", DbType="NVarChar(100)")]
		public string SecondParty
		{
			get
			{
				return this._SecondParty;
			}
			set
			{
				if ((this._SecondParty != value))
				{
					this.OnSecondPartyChanging(value);
					this.SendPropertyChanging();
					this._SecondParty = value;
					this.SendPropertyChanged("SecondParty");
					this.OnSecondPartyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContractPeriod", DbType="NVarChar(50)")]
		public string ContractPeriod
		{
			get
			{
				return this._ContractPeriod;
			}
			set
			{
				if ((this._ContractPeriod != value))
				{
					this.OnContractPeriodChanging(value);
					this.SendPropertyChanging();
					this._ContractPeriod = value;
					this.SendPropertyChanged("ContractPeriod");
					this.OnContractPeriodChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Principal", DbType="NVarChar(20)")]
		public string Principal
		{
			get
			{
				return this._Principal;
			}
			set
			{
				if ((this._Principal != value))
				{
					this.OnPrincipalChanging(value);
					this.SendPropertyChanging();
					this._Principal = value;
					this.SendPropertyChanged("Principal");
					this.OnPrincipalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SumMoney", DbType="Money")]
		public System.Nullable<decimal> SumMoney
		{
			get
			{
				return this._SumMoney;
			}
			set
			{
				if ((this._SumMoney != value))
				{
					this.OnSumMoneyChanging(value);
					this.SendPropertyChanging();
					this._SumMoney = value;
					this.SendPropertyChanged("SumMoney");
					this.OnSumMoneyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContractDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ContractDate
		{
			get
			{
				return this._ContractDate;
			}
			set
			{
				if ((this._ContractDate != value))
				{
					this.OnContractDateChanging(value);
					this.SendPropertyChanging();
					this._ContractDate = value;
					this.SendPropertyChanged("ContractDate");
					this.OnContractDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="NVarChar(50)")]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ContractTypes_ProjectContracts", Storage="_ContractTypes", ThisKey="TypeID", OtherKey="TypeID", IsForeignKey=true)]
		public ContractTypes ContractTypes
		{
			get
			{
				return this._ContractTypes.Entity;
			}
			set
			{
				ContractTypes previousValue = this._ContractTypes.Entity;
				if (((previousValue != value) 
							|| (this._ContractTypes.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ContractTypes.Entity = null;
						previousValue.ProjectContracts.Remove(this);
					}
					this._ContractTypes.Entity = value;
					if ((value != null))
					{
						value.ProjectContracts.Add(this);
						this._TypeID = value.TypeID;
					}
					else
					{
						this._TypeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ContractTypes");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProjectBase_ProjectContracts", Storage="_ProjectBase", ThisKey="ProjectID", OtherKey="ProjectId", IsForeignKey=true, DeleteRule="CASCADE")]
		public ProjectBase ProjectBase
		{
			get
			{
				return this._ProjectBase.Entity;
			}
			set
			{
				ProjectBase previousValue = this._ProjectBase.Entity;
				if (((previousValue != value) 
							|| (this._ProjectBase.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProjectBase.Entity = null;
						previousValue.ProjectContracts.Remove(this);
					}
					this._ProjectBase.Entity = value;
					if ((value != null))
					{
						value.ProjectContracts.Add(this);
						this._ProjectID = value.ProjectId;
					}
					else
					{
						this._ProjectID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ProjectBase");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
